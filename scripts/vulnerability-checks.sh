#!/usr/bin/env bash

#### Emoji Function
emojiFunction() {
  for i in {1..95}; do
    printf "$1"
  done
  printf '\n'
}

#### Start Scanning the image locally & publish report
echo "Starting vulnerability checks...."
#Setting default value to 0,0 in case the ALLOWED_CRITICAL_HIGH_VULNERABILITIES variable is not set
ALLOWED_CRITICAL_HIGH_VULNERABILITIES="${ALLOWED_CRITICAL_HIGH_VULNERABILITIES:-0,0}"
IFS=',' read -ra my_array <<< "$ALLOWED_CRITICAL_HIGH_VULNERABILITIES"
ALLOWED_CRITICAL_VULNERABILITIES="${my_array[0]}"
ALLOWED_HIGH_VULNERABILITIES="${my_array[1]}"
echo "ALLOWED_CRITICAL_HIGH_VULNERABILITIES: $ALLOWED_CRITICAL_HIGH_VULNERABILITIES, ALLOWED_CRITICAL_VULNERABILITIES: $ALLOWED_CRITICAL_VULNERABILITIES, ALLOWED_HIGH_VULNERABILITIES: $ALLOWED_HIGH_VULNERABILITIES"

TAG=$(cat version/docker-version.txt)
TAG=$([ "${TAG}" == "" ] && echo "latest" || echo "${TAG}")
echo "Scanning Tag : ${TAG}"
mkdir reports

time_stamp="$(date +'%d-%m-%Y-%r')"
echo "Checking Vulnerabilities at: ${time_stamp}"
#### The real game starts here
trivy image "${DOCKER_USER}/${DOCKER_IMAGE}:${TAG}" > reports/"vulnerability-report-${time_stamp}".txt

# Evaluating the scan results
scan_status=$(grep Total: reports/"vulnerability-report-${time_stamp}".txt)
high_vulnerability=$(echo "$scan_status" | grep -oE 'HIGH: [0-9]+' | awk '{print $2}')
critical_vulnerability=$(echo "$scan_status" | grep -oE 'CRITICAL: [0-9]+' | awk '{print $2}')

echo "Vulnerabilities Report Generated..."
# Check if the Critical and High Vulnerability matches the allowed values, default set to 0,0 i.e., no vulnerabilities should be allowed
# But in scenarios where no fix is available and we would like to temporarily allow the vulnerable images to be deployed we can update the variable in the pipeline without updating the code.
if [[ $critical_vulnerability == $ALLOWED_CRITICAL_VULNERABILITIES && $high_vulnerability == $ALLOWED_HIGH_VULNERABILITIES ]]; then
  printf "\033[92m"
  emojiFunction "\xE2\x99\xA0"
  echo "Temporarily allowing '$ALLOWED_CRITICAL_VULNERABILITIES' CRITICAL and '$ALLOWED_HIGH_VULNERABILITIES' HIGH vulnerabilities"
  emojiFunction "\xE2\x99\xA0"
  echo "'$critical_vulnerability' Critical & '$high_vulnerability' High Vulnerabilities Identified, please review 'reports/vulnerability-report-${time_stamp}.txt' for detailed information."
  echo "Scan status : ${scan_status}"
  emojiFunction "\xE2\x99\xA0"
  echo -e "\033[0m"
else
  printf "\033[91m\033[1m\n"
  emojiFunction "\xE2\x98\xA0"
  echo "CRITICAL or HIGH Vulnerabilities Identified, please review 'reports/vulnerability-report-${time_stamp}.txt' for detailed information."
  emojiFunction "\xE2\x98\xA0"
  echo "Scan status : ${scan_status}"
  echo "Fix the vulnerabilities to proceed with the deployment."
  emojiFunction "\xE2\x98\xA0"
  exit 1
fi
echo "Trivy Vulnerabilities Check Ends.."
