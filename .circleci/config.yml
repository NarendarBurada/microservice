version: 2.1

executors:
  base:
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
  ubuntu:
    docker:
      - image: ubuntu:latest
  trivy:
    docker:
      - image: aquasec/trivy:latest
  helm:
    docker:
      - image: nukengprodservice/helm:latest

aliases:
  - &mount_workspace
    attach_workspace:
      at: .
  - &restore_cache
    restore_cache:
      key: >-
        v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
        v1-gradle-cache-{{ checksum "build.gradle" }}
jobs:
  build:
    executor: base
    description: Install dependencies & Build
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Install Dependencies
          command: ./gradlew build -x test -x checkstyleTest
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: .
          paths:
            - .
  test:
    executor: base
    description: Unit Test & Code Coverage
    steps:
      - *mount_workspace
      - *restore_cache
      - run:
          name: Run tests in parallel
          # Use "./gradlew test" instead if tests are not run in parallel
          command: |
            cd src/test/java
            # Get list of classnames of tests that should run on this node
            CLASSNAMES=$(circleci tests glob "**/*.java" \
              | cut -c 1- | sed 's@/@.@g' \
              | sed 's/.\{5\}$//' \
              | circleci tests split --split-by=timings --timings-type=classname)
            cd ../../..
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            ./gradlew test $GRADLE_ARGS
      - run:
          name: Generate code coverage report
          command:
            ./gradlew jacocoTestReport
      - run:
          name: Code coverage verification
          command:
            ./gradlew jacocoTestCoverageVerification
      - store_artifacts:
          path: build/reports/jacocoHtml
          when: always
      - store_test_results:
          path: build/reports/tests/test
          when: always
      - run:
          name: Assemble JAR
          command: |
            # Skip this for other nodes
            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
              ./gradlew assemble
            fi
      # This will be empty for all nodes except the first one
      - persist_to_workspace:
          root: build
          paths:
            - libs

  checkstyle:
    executor: base
    description: Code Checkstyle check
    steps:
      - *mount_workspace
      - *restore_cache
      - run:
          name: Generate checkstyle coverage report
          command: ./gradlew check
      - store_artifacts:
          path: build/reports/checkstyle
          when: always

  mutation_test:
    executor: base
    description: Mutation Testing
    # Remove if parallelism is not desired
    parallelism: 2
    steps:
      - *mount_workspace
      - *restore_cache
      - run:
          name: Perform Mutation Testing on Unit Test
          command: ./gradlew pitest
      - store_artifacts:
          path: build/reports/pitest
          when: always

  build_and_push_image:
    description: Build Docker Image & Push
    executor: base
    steps:
      - *mount_workspace
      - setup_remote_docker
      - run:
          name: Docker Image build and push
          command: .circleci/scripts/docker-build.sh
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - version.txt

  check_image_vulnerability:
    description: Use Trivy to check the final docker image vulnerabilities before deployment
    executor: trivy
    steps:
      - *mount_workspace
      - checkout
      - run:
          name: Trivy Image Vulnerability Check
          command: |
            apk add --no-cache bash
            /root/project/.circleci/scripts/vulnerability-checks.sh
      - store_artifacts:
          path: reports
          when: always

  helm_deploy:
    executor: helm
    parameters:
      release:
        type: string
    steps:
      - *mount_workspace
      - checkout
      - run:
          name: aws eks config update
          command: aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME}
      - run:
          name: helm release
          command: |
            RELEASE_NAME="<< parameters.release >>" \
            EKS_NAMESPACE="${EKS_NAMESPACE}" \
            ./.circleci/scripts/helm-deploy.sh

  health_check:
    executor: ubuntu
    steps:
      - checkout
      - run:
          command: ./.circleci/scripts/health-check.sh

workflows:
  version: 2.1
  workflow-all-jobs:
    jobs:
      - build:
          name: Build
      - test:
          name: Unit Test
          requires:
            - Build
      - checkstyle:
          name: Checkstyle
          requires:
            - Build
      - mutation_test:
          name: Mutation Tests
          requires:
            - Build
      - build_and_push_image:
          context: credentials
          name: Docker Image build and push
          requires:
            - Unit Test
            - Checkstyle
            - Mutation Tests
      - check_image_vulnerability:
          name: Image Vulnerability Check
          context: credentials
          requires:
            - Docker Image build and push
      - helm_deploy:
          context: credentials
          name: Deploy app to K8S
          release: companieshouse-release
          requires:
            - Image Vulnerability Check
      - health_check:
          context: credentials
          name: Health Check
          requires:
            - Deploy app to K8S
  scheduled-vulnerability-check:
    triggers:
      - schedule:
          cron: "20 20 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - check_image_vulnerability:
          name: Image Vulnerability Check
          context: credentials
