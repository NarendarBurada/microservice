version: 2.1

executors:
  base-jdk8:
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
  circleci-ubuntu:
    docker:
      - image: cimg/base:2020.01
  trivy:
    docker:
      - image: aquasec/trivy:latest
  helm:
    docker:
      - image: nukengprodservice/helm:latest

aliases:
  - &mount_workspace
    attach_workspace:
      at: .
  - &restore_gradlew_cache
    restore_cache:
      keys:
        - v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
  - &restore_gradle_cache
    restore_cache:
      keys:
        - v1-gradle-cache-{{ checksum "build.gradle" }}
  - &only_master
    filters:
      branches:
        only: master
  - &credential_context
    context: credentials

jobs:
  build:
    executor: base-jdk8
    description: Install dependencies & Build
    steps:
      - checkout
      - *restore_gradlew_cache
      - *restore_gradle_cache
      - run:
          name: Install Dependencies
          command: |
            ./gradlew build -x test -x checkstyleTest
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    executor: base-jdk8
    description: Unit Test & Code Coverage
    steps:
      - *mount_workspace
      - *restore_gradlew_cache
      - *restore_gradle_cache
      - run:
          name: Run Unit and E2E tests
          command: ./gradlew test
      - store_artifacts:
          path: build/reports/tests/test
          when: always
      - store_test_results:
          path: build/test-results/test
          when: always

  gradle_execute_task:
    executor: base-jdk8
    parameters:
      step_name:
        type: string
        default: executing the task
      gradle_task:
        type: string
      artifact_path:
        type: string
    steps:
      - *mount_workspace
      - *restore_gradlew_cache
      - *restore_gradle_cache
      - run:
          name: << parameters.step_name >>
          command: ./gradlew '<< parameters.gradle_task >>'
      - store_artifacts:
          path: << parameters.artifact_path >>
          when: always

  check_dependency_vulnerability:
    executor: base-jdk8
    parameters:
      timeout:
        description: Execution timeout for running the step command
        type: string
        default: 10m
    description: Dependency Vulnerability Check
    steps:
      - *mount_workspace
      - checkout
      - *restore_gradlew_cache
      - *restore_gradle_cache
      - run:
          name: Perform Dependency Vulnerability Checks
          no_output_timeout: << parameters.timeout >>
          command: ./gradlew dependencyCheckAnalyze
      - store_test_results:
          path: build/reports/dependency-vulnerabilities
          when: always
      - store_artifacts:
          path: build/reports/dependency-vulnerabilities
          when: always

  build_and_push_image:
    description: Build Docker Image & Push
    executor: base-jdk8
    steps:
      - *mount_workspace
      - setup_remote_docker
      - run:
          name: Docker Image build and push
          command: .circleci/scripts/docker-build.sh
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - version.txt

  check_image_vulnerability:
    description: Use Trivy to check the final docker image vulnerabilities before deployment
    executor: trivy
    steps:
      - checkout
      - run:
          name: Trivy Image Vulnerability Check
          command: |
            apk add --no-cache bash
            /root/project/.circleci/scripts/vulnerability-checks.sh
      - store_artifacts:
          path: reports
          when: always

  helm_deploy:
    executor: helm
    parameters:
      release:
        type: string
    steps:
      - *mount_workspace
      - checkout
      - run:
          name: aws eks config update
          command: aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME}
      - run:
          name: helm release
          command: |
            RELEASE_NAME="<< parameters.release >>" \
            EKS_NAMESPACE="${EKS_NAMESPACE}" \
            ./.circleci/scripts/helm-deploy.sh

  health_check:
    executor: circleci-ubuntu
    steps:
      - checkout
      - run:
          name: Perform API Health Check
          command: ./.circleci/scripts/health-check.sh

workflows:
  version: 2.1
  workflow-all-jobs:
    jobs:
      - build:
          <<: *only_master
          name: Build
      - test:
          <<: *only_master
          name: Unit & E2E Tests
          requires:
            - Build
      - gradle_execute_task:
          <<: *only_master
          name: Jacoco Code Coverage
          step_name: Check Jacoco code coverage & generate report
          gradle_task: jacocoTestCoverageVerification
          artifact_path: build/reports/jacocoHtml
          requires:
            - Unit & E2E Tests
      - gradle_execute_task:
          <<: *only_master
          name: Checkstyle
          step_name: Check styling and generate report
          gradle_task: check
          artifact_path: build/reports/checkstyle
          requires:
            - Build
      - gradle_execute_task:
          <<: *only_master
          name: Mutation Tests
          step_name: Perform Mutation Testing on Unit Tests
          gradle_task: pitest
          artifact_path: build/reports/pitest
          requires:
            - Build
      - check_dependency_vulnerability:
          <<: *only_master
          name: Dependency Vulnerability Checks
          timeout: 20m
          requires:
            - Build
      - build_and_push_image:
          <<: *only_master
          <<: *credential_context
          name: Docker Image build and push
          requires:
            - Jacoco Code Coverage
            - Checkstyle
            - Mutation Tests
            - Dependency Vulnerability Checks
      - check_image_vulnerability:
          <<: *only_master
          <<: *credential_context
          name: Image Vulnerability Check
          requires:
            - Docker Image build and push
      - helm_deploy:
          <<: *only_master
          <<: *credential_context
          name: Deploy app to K8S
          release: companieshouse-release
          requires:
            - Image Vulnerability Check
      - health_check:
          <<: *only_master
          <<: *credential_context
          name: Health Check
          requires:
            - Deploy app to K8S
  scheduled-vulnerability-check:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          <<: *only_master
    jobs:
      - check_dependency_vulnerability:
          name: Dependency Vulnerability Checks
          timeout: 20m
      - check_image_vulnerability:
          name: Image Vulnerability Check
          <<: *credential_context
