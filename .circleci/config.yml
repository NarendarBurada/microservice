version: 2.1

executors:
  base:
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
  ubuntu:
    docker:
      - image: ubuntu:latest

aliases:
  - &mount_workspace
    attach_workspace:
      at: .
  - &restore_cache
    restore_cache:
      key: >-
        v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
        v1-gradle-cache-{{ checksum "build.gradle" }}
jobs:
  build:
    executor: base
    description: Install dependencies & Build
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Install Dependencies
          command: ./gradlew build -x test -x checkstyleTest
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: .
          paths:
            - .
  test:
    executor: base
    description: Unit Test & Code Coverage
    steps:
      - *mount_workspace
      - *restore_cache
      - run:
          name: Run tests in parallel
          # Use "./gradlew test" instead if tests are not run in parallel
          command: |
            cd src/test/java
            # Get list of classnames of tests that should run on this node
            CLASSNAMES=$(circleci tests glob "**/*.java" \
              | cut -c 1- | sed 's@/@.@g' \
              | sed 's/.\{5\}$//' \
              | circleci tests split --split-by=timings --timings-type=classname)
            cd ../../..
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            ./gradlew test $GRADLE_ARGS
      - run:
          name: Generate code coverage report
          command:
            ./gradlew jacocoTestReport
      - run:
          name: Code coverage verification
          command:
            ./gradlew jacocoTestCoverageVerification
      - store_artifacts:
          path: build/reports/jacocoHtml
          when: always
      - store_test_results:
          path: build/reports/tests/test
          when: always
      - run:
          name: Assemble JAR
          command: |
            # Skip this for other nodes
            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
              ./gradlew assemble
            fi
      # This will be empty for all nodes except the first one
      - persist_to_workspace:
          root: build
          paths:
            - libs

  checkstyle:
    executor: base
    description: Code Checkstyle check
    steps:
      - *mount_workspace
      - *restore_cache
      - run:
          name: Generate checkstyle coverage report
          command:
            ./gradlew check
      - store_artifacts:
          path: build/reports/checkstyle
          when: always

  mutationtest:
    executor: base
    description: Mutation Testing
    # Remove if parallelism is not desired
    parallelism: 2
    steps:
      - *mount_workspace
      - *restore_cache
      - run:
          name: Perform Mutation Testing on Unit Test
          command:
            ./gradlew pitest
      - store_artifacts:
          path: build/reports/pitest
          when: always

  buildAndPushImage:
    description: Build Docker Image & Push
    executor: base
    steps:
      - *mount_workspace
      - setup_remote_docker
      - run: |
          TAG=0.1.$CIRCLE_BUILD_NUM
          docker build -t "$DOCKER_USER"/companieshouse:$TAG -f ci.Dockerfile .
          echo "$DOCKER_PASS" | docker login --username "$DOCKER_USER" --password-stdin
          docker push "$DOCKER_USER"/companieshouse:$TAG

  checkImageVulenerability:
    description: Use Trivy to check the final docker image vulnerabilities before deployment
    executor: ubuntu
    steps:
      - restore_cache:
          key: v1-trivy-cache-1
      - run:
          command: |
            #!/usr/bin/env bash
            apt-get update
            echo "Installing Trivy"
            apt-get -y install wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
            echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | tee -a /etc/apt/sources.list.d/trivy.list
            apt-get update
            export DEBIAN_FRONTEND=noninteractive
            apt-get -y install trivy
            echo "Trivy Installation completed and starting checking vulnerabilities ....."

            TAG=0.1.$CIRCLE_BUILD_NUM
            echo "Testing vulnerability"
            trivy -s CRITICAL abhisheksr01/companieshouse:$TAG
            critical_vulnerability=$(trivy -s CRITICAL abhisheksr01/companieshouse:$TAG | grep Total | sed "s/Total: //g" | cut -c1-1)
            trivy abhisheksr01/companieshouse:0.1.55 > vulenerability-report.txt
            if [ "$critical_vulnerability" != "0" ]; then
                echo "Critical Vulenerabilities identified, review the attached vulnerability report"
                echo Fix the CRITICAL vulnerabilites to proceed with the deployment in the atatched report1>&2
                exit 1
            else
              echo "Everything is good"
            fi
      - save_cache:
          paths:
            - /root/.cache/trivy
          key: v1-trivy-cache-1
      - store_artifacts:
          path: .
          when: always

workflows:
  version: 2.1
  workflow-alljobs:
    jobs:
      - build
      - test:
          requires:
            - build
      - checkstyle:
          requires:
            - build
      - mutationtest:
          requires:
            - build
      - buildAndPushImage:
          context: credentials
          requires:
            - test
            - checkstyle
            - mutationtest
      - checkImageVulenerability:
          requires:
            - buildAndPushImage
